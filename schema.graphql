type Query {
    employee(id: ID!): Employee!
    employees : [Employee!]
    tasksForEmployee(id: ID!): [Task]
    getEmployeesByTeam(team: String!): [Employee!]
    messages: [Message!]
    UnicastMessages(senderEmpId: ID!, receiverEmpId: ID!): [UnicastMessage!]
}

type Mutation {
    createTaskForEmployee(input: createTaskInput!): Task
    addMessage(text: String!): Message
    addUnicastMessage(input: createUnicastMessageInput!): UnicastMessage
    deleteTask(id: ID!): Task
}

type Subscription {
    messageAdded: Message
    unicastMessageAdded: UnicastMessage
}

type Employee {
    _id: ID!
    firstName: String!
    lastName: String
    email: String!
    password: String!
    designation: String!
    mobileNo: String
    dob: String!
    address: String
    address2: String
    city: String
    # state: String
    zip: String
    # leave: Leave!
    gender: String!
    managerId: ID
    team: String!
    pan: String!
}

# type Leave {
#     cl: Float!
#     sl: Float!
#     el: Float
#     others: Float
# }

type Task {
    _id: ID
    empId: ID!
    tags: [String!]
    assignedDate: String
    completionDate: String
    status: [StatusHistory!]
    assigneeId: ID!
    title: String!
    description: String
    type: String!
    pinned: Boolean
    priority: Boolean
    backlog: Boolean
}

type StatusHistory {
  value: String!
  updatedAt: String!
}

type Message {
    _id: ID
    senderEmpId: ID!
    senderName: String!
    text: String!,
    date: String!
    # receiverEmpIds: [ID!]
}

type UnicastMessage {
    _id: ID
    senderEmpId: ID!
    senderName: String!
    text: String!,
    date: String!
    receiverEmpId: ID!
}

scalar JSON

input createTaskInput {
    _id: ID
    empId: ID!
    tags: [String!]
    completionDate: String!
    status: [StatusHistoryInput!]
    assigneeId: ID
    title: String!
    description: String!
    type: String!
    pinned: Boolean
    priority: Boolean
    backlog: Boolean
}

input StatusHistoryInput {
  value: String!
  updatedAt: String!
}

input createUnicastMessageInput {
    text: String!
    senderEmpId: ID!
    receiverEmpId: ID!
}